package main

import (
	"fmt"
	"log"
	"math/rand"
	"os"
	"time"

	"github.com/bxcodec/faker/v3"
)

var categories = []string{
	"football", "history", "geography", "art", "cinema", "culture", "body", "exercise", "math",
}

func main() {
	rand.Seed(time.Now().UnixNano())

	file, err := os.Create("seed_questions.sql")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	var questionID uint64 = 1
	var answerID uint64 = 1

	write := func(s string) {
		_, _ = file.WriteString(s + "\n")
	}

	write("-- SQL Seed Generated by Go")
	write("START TRANSACTION;")

	for _, category := range categories {
		for difficulty := 1; difficulty <= 3; difficulty++ {
			for i := 0; i < 100; i++ {
				qText := escape(faker.Sentence())
				write(fmt.Sprintf(
					"INSERT INTO questions (id, text, difficulty, category) VALUES (%d, '%s', %d, '%s');",
					questionID, qText, difficulty, category,
				))

				correctChoice := rand.Intn(4) + 1
				var correctAnswerID uint64 = 0

				for choice := 1; choice <= 4; choice++ {
					answerText := escape(faker.Word())
					write(fmt.Sprintf(
						"INSERT INTO possible_answers (id, text, question_id, choice) VALUES (%d, '%s', %d, %d);",
						answerID, answerText, questionID, choice,
					))

					if choice == correctChoice {
						correctAnswerID = answerID
					}
					answerID++
				}

				write(fmt.Sprintf(
					"UPDATE questions SET correct_answer_id = %d WHERE id = %d;",
					correctAnswerID, questionID,
				))
				write("")
				questionID++
			}
		}
	}

	write("COMMIT;")
	fmt.Println("âœ… SQL file generated: seed_questions.sql")
}

// escape single quotes
func escape(text string) string {
	return fmt.Sprintf("%s", replaceQuotes(text))
}

func replaceQuotes(s string) string {
	return string([]rune(s))
	// optionally add: strings.ReplaceAll(s, "'", "''") if faker ever generates '
}
